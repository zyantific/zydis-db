using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;

using Zydis.Generator.SourceGenerator.Helpers;

namespace Zydis.Generator.SourceGenerator.CodeGeneration;

internal static class GeneratorUtils
{
    public static string GetNativeIdentifier(string value)
    {
        var values = value.Split(':');

        return values[0];
    }

    public static string GetGeneratorIdentifier(string value)
    {
        return TryGetGeneratorIdentifier(value, out var result) ? result : GetNativeIdentifier(value).ToPascalCase();
    }

    public static bool TryGetGeneratorIdentifier(string value, [NotNullWhen(true)] out string? identifier)
    {
        var values = value.Split(':');
        if (values.Length > 1)
        {
            identifier = values[1];
            return !string.IsNullOrEmpty(identifier);
        }

        identifier = null;
        return false;
    }

    public static string GetZydisIdentifier(string value, bool uppercase = false)
    {
        return TryGetZydisIdentifier(value, out var result)
            ? result
            : uppercase
                ? GetNativeIdentifier(value).ToUpperInvariant()
                : GetNativeIdentifier(value).ToPascalCase();
    }

    public static bool TryGetZydisIdentifier(string value, [NotNullWhen(true)] out string? identifier)
    {
        var values = value.Split(':');
        if (values.Length > 2)
        {
            identifier = values[2];
            return !string.IsNullOrEmpty(identifier);
        }

        identifier = null;
        return false;
    }

    public static void StartFormatSourceFile(SourceWriter writer, string? ns, IEnumerable<string>? declarationHeaders)
    {
        writer.WriteLine("// <auto-generated/>");
        writer.WriteLine();
        writer.WriteLine("""
                         #nullable enable

                         """);

        if (ns is not null)
        {
            writer.WriteLine($"namespace {ns}");
            writer.WriteLine('{');
            writer.Indentation++;
        }

        foreach (var header in declarationHeaders ?? [])
        {
            writer.WriteLine(header);
            writer.WriteLine('{');
            writer.Indentation++;
        }
    }

    public static void EndFormatSourceFile(SourceWriter writer)
    {
        while (writer.Indentation > 0)
        {
            writer.Indentation--;
            writer.WriteLine('}');
        }
    }
}
